@page "/admin"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient http
@inject IAccessTokenProvider AuthorizationService

<PageTitle>Datums statistieken</PageTitle>

<AuthorizeView>
    <Authorized>
        <h2>Datums wanneer statistieken worden gelogd:</h2>
        <p>Het verwijderen van datums is enkel mogelijk voor toekomstige datums!</p>

        <!-- Date Input Form -->
        <div class="mb-3">
            <label for="newDate" class="form-label">Nieuwe datum toevoegen (dd-mm-yyyy):</label>
            <input @bind="newDate" class="form-control w-25" type="text" placeholder="dd-mm-yyyy" />
            <button class="btn btn-primary mt-2" @onclick="AddDate">Toevoegen</button>
        </div>

        <table class="table table-striped table-bordered w-25">
            <thead>
                <tr>
                    <th class="w-75">Datum</th>
                    <th class="w-25">Verwijder datum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var date in dates)
                {
                    <tr>
                        <td>@FormatDate(date.StudentSpecialDate)</td>  <!-- Display formatted date -->
                        <td>
                            @if (date.StudentSpecialDate > DateOnly.FromDateTime(DateTime.Today))
                            {
                                <!-- Show delete button only for future dates -->
                                <button class="btn btn-danger" @onclick="() => DeleteDate(date.Id)">Verwijderen</button>
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private List<SpecialDate> dates = new List<SpecialDate>();
    private string newDate = ""; // Stores the new date input

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadSpecialDates();
    }

    private async Task LoadSpecialDates()
    {
        var state = await AuthenticationState;
        var accessTokenResult = await AuthorizationService.RequestAccessToken();

        accessTokenResult.TryGetToken(out var token);

        http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
        var response = await http.GetAsync("SpecialDates");

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            dates = System.Text.Json.JsonSerializer.Deserialize<List<SpecialDate>>(jsonResponse,
                new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("Failed to load special dates.");
        }
    }

    private async Task AddDate()
    {
        try
        {
            DateTime parsedDate = DateTime.ParseExact(newDate, "dd-MM-yyyy", null);
            string formattedDate = parsedDate.ToString("yyyy-MM-dd"); // Convert to API format

            var newSpecialDate = new
            {
                SpecialDate = formattedDate,  // Use correct property name (matches API)
                OfficialDate = false
            };

            var state = await AuthenticationState;
            var accessTokenResult = await AuthorizationService.RequestAccessToken();
            accessTokenResult.TryGetToken(out var token);

            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
            var response = await http.PostAsJsonAsync("SpecialDates", newSpecialDate);

            if (response.IsSuccessStatusCode)
            {
                newDate = ""; // Clear input field
                await LoadSpecialDates(); // Refresh list
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to add new date. Server response: {errorMessage}");
            }
        }
        catch (FormatException)
        {
            Console.WriteLine("Invalid date format. Please use dd-MM-yyyy.");
        }
    }



    private async Task DeleteDate(int id)
    {
        var state = await AuthenticationState;
        var accessTokenResult = await AuthorizationService.RequestAccessToken();

        accessTokenResult.TryGetToken(out var token);

        http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
        var response = await http.DeleteAsync($"SpecialDates/{id}");

        if (response.IsSuccessStatusCode)
        {
            await LoadSpecialDates(); // Refresh list after deletion
        }
        else
        {
            Console.WriteLine($"Failed to delete date with ID {id}");
        }
    }

    private string FormatDate(DateOnly date)
    {
        return date.ToString("dd-MM-yyyy");
    }

    public class SpecialDate
    {
        public int Id { get; set; }
        public DateOnly StudentSpecialDate { get; set; }
        public bool OfficialDate { get; set; }
    }
}
